#ifndef REP_MOTIONMANAGER_SOURCE_H
#define REP_MOTIONMANAGER_SOURCE_H

// This is an autogenerated file.
// Do not edit this file, any changes made will be lost the next time it is generated.

#include <QtCore/qobject.h>
#include <QtCore/qdatastream.h>
#include <QtCore/qvariant.h>
#include <QtCore/qmetatype.h>

#include <QtRemoteObjects/qremoteobjectnode.h>
#include <QtRemoteObjects/qremoteobjectsource.h>


class MotionManagerSource : public QObject
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "MotionManager")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "844aded0659851c4bfdd10bfa7f54b89eca2d0f4")

public:
    explicit MotionManagerSource(QObject *parent = nullptr) : QObject(parent)
    {
    }

public:
    virtual ~MotionManagerSource() {}


Q_SIGNALS:
    void reportMotionState(QVariant motionState);
    void instructionExecuteDone(QString uuid, QString errMsg, QVariant result);

public Q_SLOTS:
    virtual void setMotionStateReporter(bool enable) = 0;
    virtual void setMoveProtectionEnable(bool enable) = 0;
    virtual void updateMoveProtection() = 0;
    virtual bool initMotionManager(QByteArray motionElementDefinition) = 0;
    virtual void setIsPaused(bool isPaused) = 0;
    virtual bool waitPaused() = 0;
    virtual void handleAbort() = 0;
    virtual void handleReset() = 0;
    virtual double getAxisFeedbackPos(QString axisName, int cacheInvalidationTime=2) = 0;
    virtual double getAxisCurrentPos(QString axisName) = 0;
    virtual double getAxisTargetPos(QString axisName, int cacheInvalidationTime=2) = 0;
    virtual int getCylinderCurrentState(QString cylName, int cacheInvalidationTime=2) = 0;
    virtual bool getDiCurrentState(QString diName, int cacheInvalidationTime=2) = 0;
    virtual void onExecuteInstruction(QString uuid, int elementType, QString elementName, QString cmd, QVariantList args, bool sendbackResult=false) = 0;

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};

#if (QT_VERSION < QT_VERSION_CHECK(5, 5, 0))
#endif


class MotionManagerSimpleSource : public MotionManagerSource
{
    Q_OBJECT

public:
    explicit MotionManagerSimpleSource(QObject *parent = nullptr) : MotionManagerSource(parent)
    {
    }

public:
    virtual ~MotionManagerSimpleSource() {}


private:
};


template <class ObjectType>
struct MotionManagerSourceAPI : public SourceApiMap
{
    MotionManagerSourceAPI(ObjectType *object, const QString &name = QStringLiteral("MotionManager"))
        : SourceApiMap(), m_name(name)
    {
        Q_UNUSED(object);
        m_enums[0] = 0;
        m_properties[0] = 0;
        m_signals[0] = 2;
        m_signals[1] = QtPrivate::qtro_signal_index<ObjectType>(&ObjectType::reportMotionState, static_cast<void (QObject::*)(QVariant)>(0),m_signalArgCount+0,&m_signalArgTypes[0]);
        m_signals[2] = QtPrivate::qtro_signal_index<ObjectType>(&ObjectType::instructionExecuteDone, static_cast<void (QObject::*)(QString,QString,QVariant)>(0),m_signalArgCount+1,&m_signalArgTypes[1]);
        m_methods[0] = 14;
        m_methods[1] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::setMotionStateReporter, static_cast<void (QObject::*)(bool)>(0),"setMotionStateReporter(bool)",m_methodArgCount+0,&m_methodArgTypes[0]);
        m_methods[2] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::setMoveProtectionEnable, static_cast<void (QObject::*)(bool)>(0),"setMoveProtectionEnable(bool)",m_methodArgCount+1,&m_methodArgTypes[1]);
        m_methods[3] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::updateMoveProtection, static_cast<void (QObject::*)()>(0),"updateMoveProtection()",m_methodArgCount+2,&m_methodArgTypes[2]);
        m_methods[4] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::initMotionManager, static_cast<void (QObject::*)(QByteArray)>(0),"initMotionManager(QByteArray)",m_methodArgCount+3,&m_methodArgTypes[3]);
        m_methods[5] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::setIsPaused, static_cast<void (QObject::*)(bool)>(0),"setIsPaused(bool)",m_methodArgCount+4,&m_methodArgTypes[4]);
        m_methods[6] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::waitPaused, static_cast<void (QObject::*)()>(0),"waitPaused()",m_methodArgCount+5,&m_methodArgTypes[5]);
        m_methods[7] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::handleAbort, static_cast<void (QObject::*)()>(0),"handleAbort()",m_methodArgCount+6,&m_methodArgTypes[6]);
        m_methods[8] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::handleReset, static_cast<void (QObject::*)()>(0),"handleReset()",m_methodArgCount+7,&m_methodArgTypes[7]);
        m_methods[9] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::getAxisFeedbackPos, static_cast<void (QObject::*)(QString,int)>(0),"getAxisFeedbackPos(QString,int)",m_methodArgCount+8,&m_methodArgTypes[8]);
        m_methods[10] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::getAxisCurrentPos, static_cast<void (QObject::*)(QString)>(0),"getAxisCurrentPos(QString)",m_methodArgCount+9,&m_methodArgTypes[9]);
        m_methods[11] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::getAxisTargetPos, static_cast<void (QObject::*)(QString,int)>(0),"getAxisTargetPos(QString,int)",m_methodArgCount+10,&m_methodArgTypes[10]);
        m_methods[12] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::getCylinderCurrentState, static_cast<void (QObject::*)(QString,int)>(0),"getCylinderCurrentState(QString,int)",m_methodArgCount+11,&m_methodArgTypes[11]);
        m_methods[13] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::getDiCurrentState, static_cast<void (QObject::*)(QString,int)>(0),"getDiCurrentState(QString,int)",m_methodArgCount+12,&m_methodArgTypes[12]);
        m_methods[14] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::onExecuteInstruction, static_cast<void (QObject::*)(QString,int,QString,QString,QVariantList,bool)>(0),"onExecuteInstruction(QString,int,QString,QString,QVariantList,bool)",m_methodArgCount+13,&m_methodArgTypes[13]);
    }

    QString name() const override { return m_name; }
    QString typeName() const override { return QStringLiteral("MotionManager"); }
    int enumCount() const override { return m_enums[0]; }
    int propertyCount() const override { return m_properties[0]; }
    int signalCount() const override { return m_signals[0]; }
    int methodCount() const override { return m_methods[0]; }
    int sourceEnumIndex(int index) const override
    {
        if (index < 0 || index >= m_enums[0])
            return -1;
        return m_enums[index+1];
    }
    int sourcePropertyIndex(int index) const override
    {
        if (index < 0 || index >= m_properties[0])
            return -1;
        return m_properties[index+1];
    }
    int sourceSignalIndex(int index) const override
    {
        if (index < 0 || index >= m_signals[0])
            return -1;
        return m_signals[index+1];
    }
    int sourceMethodIndex(int index) const override
    {
        if (index < 0 || index >= m_methods[0])
            return -1;
        return m_methods[index+1];
    }
    int signalParameterCount(int index) const override
    {
        if (index < 0 || index >= m_signals[0])
            return -1;
        return m_signalArgCount[index];
    }
    int signalParameterType(int sigIndex, int paramIndex) const override
    {
        if (sigIndex < 0 || sigIndex >= m_signals[0] || paramIndex < 0 || paramIndex >= m_signalArgCount[sigIndex])
            return -1;
        return m_signalArgTypes[sigIndex][paramIndex];
    }
    int methodParameterCount(int index) const override
    {
        if (index < 0 || index >= m_methods[0])
            return -1;
        return m_methodArgCount[index];
    }
    int methodParameterType(int methodIndex, int paramIndex) const override
    {
        if (methodIndex < 0 || methodIndex >= m_methods[0] || paramIndex < 0 || paramIndex >= m_methodArgCount[methodIndex])
            return -1;
        return m_methodArgTypes[methodIndex][paramIndex];
    }
    int propertyIndexFromSignal(int index) const override
    {
        Q_UNUSED(index);
        return -1;
    }
    int propertyRawIndexFromSignal(int index) const override
    {
        Q_UNUSED(index);
        return -1;
    }
    const QByteArray signalSignature(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("reportMotionState(QVariant)");
        case 1: return QByteArrayLiteral("instructionExecuteDone(QString,QString,QVariant)");
        }
        return QByteArrayLiteral("");
    }
    QList<QByteArray> signalParameterNames(int index) const override
    {
        if (index < 0 || index >= m_signals[0])
            return QList<QByteArray>();
        return ObjectType::staticMetaObject.method(m_signals[index + 1]).parameterNames();
    }
    const QByteArray methodSignature(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("setMotionStateReporter(bool)");
        case 1: return QByteArrayLiteral("setMoveProtectionEnable(bool)");
        case 2: return QByteArrayLiteral("updateMoveProtection()");
        case 3: return QByteArrayLiteral("initMotionManager(QByteArray)");
        case 4: return QByteArrayLiteral("setIsPaused(bool)");
        case 5: return QByteArrayLiteral("waitPaused()");
        case 6: return QByteArrayLiteral("handleAbort()");
        case 7: return QByteArrayLiteral("handleReset()");
        case 8: return QByteArrayLiteral("getAxisFeedbackPos(QString,int)");
        case 9: return QByteArrayLiteral("getAxisCurrentPos(QString)");
        case 10: return QByteArrayLiteral("getAxisTargetPos(QString,int)");
        case 11: return QByteArrayLiteral("getCylinderCurrentState(QString,int)");
        case 12: return QByteArrayLiteral("getDiCurrentState(QString,int)");
        case 13: return QByteArrayLiteral("onExecuteInstruction(QString,int,QString,QString,QVariantList,bool)");
        }
        return QByteArrayLiteral("");
    }
    QMetaMethod::MethodType methodType(int) const override
    {
        return QMetaMethod::Slot;
    }
    QList<QByteArray> methodParameterNames(int index) const override
    {
        if (index < 0 || index >= m_methods[0])
            return QList<QByteArray>();
        return ObjectType::staticMetaObject.method(m_methods[index + 1]).parameterNames();
    }
    const QByteArray typeName(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("void");
        case 1: return QByteArrayLiteral("void");
        case 2: return QByteArrayLiteral("void");
        case 3: return QByteArrayLiteral("bool");
        case 4: return QByteArrayLiteral("void");
        case 5: return QByteArrayLiteral("bool");
        case 6: return QByteArrayLiteral("void");
        case 7: return QByteArrayLiteral("void");
        case 8: return QByteArrayLiteral("double");
        case 9: return QByteArrayLiteral("double");
        case 10: return QByteArrayLiteral("double");
        case 11: return QByteArrayLiteral("int");
        case 12: return QByteArrayLiteral("bool");
        case 13: return QByteArrayLiteral("void");
        }
        return QByteArrayLiteral("");
    }
    QByteArray objectSignature() const override { return QByteArray{"844aded0659851c4bfdd10bfa7f54b89eca2d0f4"}; }

    int m_enums[1];
    int m_properties[1];
    int m_signals[3];
    int m_methods[15];
    const QString m_name;
    int m_signalArgCount[2];
    const int* m_signalArgTypes[2];
    int m_methodArgCount[14];
    const int* m_methodArgTypes[14];
};

QT_BEGIN_NAMESPACE
QT_END_NAMESPACE


#endif // REP_MOTIONMANAGER_SOURCE_H
