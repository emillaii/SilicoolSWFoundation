#ifndef REP_CONFIGSHARE_SOURCE_H
#define REP_CONFIGSHARE_SOURCE_H

// This is an autogenerated file.
// Do not edit this file, any changes made will be lost the next time it is generated.

#include <QtCore/qobject.h>
#include <QtCore/qdatastream.h>
#include <QtCore/qvariant.h>
#include <QtCore/qmetatype.h>

#include <QtRemoteObjects/qremoteobjectnode.h>
#include <QtRemoteObjects/qremoteobjectsource.h>


class ConfigShareSource : public QObject
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "ConfigShare")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "343ce699cfb1dd0a16f769bd667485e90f1d1897")

public:
    explicit ConfigShareSource(QObject *parent = nullptr) : QObject(parent)
    {
    }

public:
    virtual ~ConfigShareSource() {}


Q_SIGNALS:
    void ConfigChanged(QString name, QByteArray content);

public Q_SLOTS:
    virtual QByteArray getConfig(QString name) = 0;

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};

#if (QT_VERSION < QT_VERSION_CHECK(5, 5, 0))
#endif


class ConfigShareSimpleSource : public ConfigShareSource
{
    Q_OBJECT

public:
    explicit ConfigShareSimpleSource(QObject *parent = nullptr) : ConfigShareSource(parent)
    {
    }

public:
    virtual ~ConfigShareSimpleSource() {}


private:
};


template <class ObjectType>
struct ConfigShareSourceAPI : public SourceApiMap
{
    ConfigShareSourceAPI(ObjectType *object, const QString &name = QStringLiteral("ConfigShare"))
        : SourceApiMap(), m_name(name)
    {
        Q_UNUSED(object);
        m_enums[0] = 0;
        m_properties[0] = 0;
        m_signals[0] = 1;
        m_signals[1] = QtPrivate::qtro_signal_index<ObjectType>(&ObjectType::ConfigChanged, static_cast<void (QObject::*)(QString,QByteArray)>(0),m_signalArgCount+0,&m_signalArgTypes[0]);
        m_methods[0] = 1;
        m_methods[1] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::getConfig, static_cast<void (QObject::*)(QString)>(0),"getConfig(QString)",m_methodArgCount+0,&m_methodArgTypes[0]);
    }

    QString name() const override { return m_name; }
    QString typeName() const override { return QStringLiteral("ConfigShare"); }
    int enumCount() const override { return m_enums[0]; }
    int propertyCount() const override { return m_properties[0]; }
    int signalCount() const override { return m_signals[0]; }
    int methodCount() const override { return m_methods[0]; }
    int sourceEnumIndex(int index) const override
    {
        if (index < 0 || index >= m_enums[0])
            return -1;
        return m_enums[index+1];
    }
    int sourcePropertyIndex(int index) const override
    {
        if (index < 0 || index >= m_properties[0])
            return -1;
        return m_properties[index+1];
    }
    int sourceSignalIndex(int index) const override
    {
        if (index < 0 || index >= m_signals[0])
            return -1;
        return m_signals[index+1];
    }
    int sourceMethodIndex(int index) const override
    {
        if (index < 0 || index >= m_methods[0])
            return -1;
        return m_methods[index+1];
    }
    int signalParameterCount(int index) const override
    {
        if (index < 0 || index >= m_signals[0])
            return -1;
        return m_signalArgCount[index];
    }
    int signalParameterType(int sigIndex, int paramIndex) const override
    {
        if (sigIndex < 0 || sigIndex >= m_signals[0] || paramIndex < 0 || paramIndex >= m_signalArgCount[sigIndex])
            return -1;
        return m_signalArgTypes[sigIndex][paramIndex];
    }
    int methodParameterCount(int index) const override
    {
        if (index < 0 || index >= m_methods[0])
            return -1;
        return m_methodArgCount[index];
    }
    int methodParameterType(int methodIndex, int paramIndex) const override
    {
        if (methodIndex < 0 || methodIndex >= m_methods[0] || paramIndex < 0 || paramIndex >= m_methodArgCount[methodIndex])
            return -1;
        return m_methodArgTypes[methodIndex][paramIndex];
    }
    int propertyIndexFromSignal(int index) const override
    {
        Q_UNUSED(index);
        return -1;
    }
    int propertyRawIndexFromSignal(int index) const override
    {
        Q_UNUSED(index);
        return -1;
    }
    const QByteArray signalSignature(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("ConfigChanged(QString,QByteArray)");
        }
        return QByteArrayLiteral("");
    }
    QList<QByteArray> signalParameterNames(int index) const override
    {
        if (index < 0 || index >= m_signals[0])
            return QList<QByteArray>();
        return ObjectType::staticMetaObject.method(m_signals[index + 1]).parameterNames();
    }
    const QByteArray methodSignature(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("getConfig(QString)");
        }
        return QByteArrayLiteral("");
    }
    QMetaMethod::MethodType methodType(int) const override
    {
        return QMetaMethod::Slot;
    }
    QList<QByteArray> methodParameterNames(int index) const override
    {
        if (index < 0 || index >= m_methods[0])
            return QList<QByteArray>();
        return ObjectType::staticMetaObject.method(m_methods[index + 1]).parameterNames();
    }
    const QByteArray typeName(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("QByteArray");
        }
        return QByteArrayLiteral("");
    }
    QByteArray objectSignature() const override { return QByteArray{"343ce699cfb1dd0a16f769bd667485e90f1d1897"}; }

    int m_enums[1];
    int m_properties[1];
    int m_signals[2];
    int m_methods[2];
    const QString m_name;
    int m_signalArgCount[1];
    const int* m_signalArgTypes[1];
    int m_methodArgCount[1];
    const int* m_methodArgTypes[1];
};

QT_BEGIN_NAMESPACE
QT_END_NAMESPACE


#endif // REP_CONFIGSHARE_SOURCE_H
